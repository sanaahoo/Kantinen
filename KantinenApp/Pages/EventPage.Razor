@page "/event"
@inject IEventServices EventServices
@using Core.Model



<h3 class="text-center my-4">Event Management</h3>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <form class="p-4 border rounded shadow-sm bg-light" @onsubmit="HandleEventSubmit">
                <fieldset>
                    <legend class="mb-3 text-primary custom-legend">Add a New Event</legend>

                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <input type="text" id="name" class="form-control" @bindvalue="NewEvent.Name" required />
                    </div>

                    <div class="mb-3">
                        <label for="dato" class="form-label">Date:</label>
                        <input type="date" id="dato" class="form-control" @bindvalue="NewEvent.Dato" required />
                    </div>

                    <div class="mb-3">
                        <label for="lokation" class="form-label">Location:</label>
                        <input type="text" id="lokation" class="form-control" @bindvalue="NewEvent.Lokation" required />
                    </div>

                    <div class="mb-3">
                        <label for="deltagerAntal" class="form-label">Participants:</label>
                        <input type="number" id="deltagerAntal" class="form-control" @bindvalue="NewEvent.DeltagerAntal" required />
                    </div>

                    <div class="mb-3">
                        <label for="madValg" class="form-label">Food Choice:</label>
                        <input type="text" id="madValg" class="form-control" @bindvalue="NewEvent.MadValg" />
                    </div>

                    <div class="mb-3">
                        <label for="saerligeOensker" class="form-label">Special Requests:</label>
                        <input type="text" id="saerligeOensker" class="form-control" @bindvalue="NewEvent.SærligeØnsker" />
                    </div>

                    <div class="mb-3">
                        <label for="kunde" class="form-label">Customer:</label>
                        <input type="text" id="kunde" class="form-control" @bindvalue="NewEvent.Kunde" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Add Event</button>
                </fieldset>
            </form>
        </div>
    </div>
</div>


    <hr />

    <h4>Event List</h4>
    @if (EventList.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Date</th>
                    <th>Location</th>
                    <th>Participants</th>
                    <th>Food Choice</th>
                    <th>Special Requests</th>
                    <th>Customer</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var evt in EventList)
                {
                    <tr>
                        <td>@evt.Name</td>
                        <td>@evt.Dato.ToShortDateString()</td>
                        <td>@evt.Lokation</td>
                        <td>@evt.DeltagerAntal</td>
                        <td>@evt.MadValg</td>
                        <td>@evt.SærligeØnsker</td>
                        <td>@evt.Kunde</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No events available.</p>
    }


@code

{
    private Event NewEvent { get; set; } = new Event();
    private List<Event> EventList { get; set; } = new List<Event>();

    private async Task HandleEventSubmit()
    {
        // Add new event through service
        await EventServices.CreateAsync(NewEvent);

        // Refresh the event list
        EventList = (await EventServices.GetAllAsync());

        // Reset the form
        NewEvent = new Event();
    }

    protected override async Task OnInitializedAsync()
    {
        // Load existing events from the service
        EventList = (await EventServices.GetAllAsync()).ToList();
    }
}
