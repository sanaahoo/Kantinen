@page "/login"
@inject ILoginServices LoginServices
@inject NavigationManager NavigationManager
@inject ILoginServices LoginService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation




<h3 class="text-center my-4">Login</h3>
<div class="container d-flex justify-content-center">
    <div class="card shadow-sm p-4" style="max-width: 400px; width: 100%;">
        <form @onsubmit="HandleLogin">
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <input type="text" id="username" class="form-control" @bind="Username" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <input type="password" id="password" class="form-control" @bind="Password" />
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
            <p class="mt-3 text-center @((Message == "Login successful!") ? "text-success" : "text-danger")">@Message</p>
        </form>
    </div>
</div>


    @code {
        private string Username { get; set; } = string.Empty;
        private string Password { get; set; } = string.Empty;
        private string Message { get; set; } = string.Empty;

        private async Task HandleLogin()
        {
            // Call the login repository to validate credentials

        // Call the VerifyLogin function

        var token = await LoginService.VerifyLogin(Username, Password);



        if (!string.IsNullOrEmpty(token)) 

        {

            // Store the token in local storage

            await LocalStorage.SetItemAsync("jwt", token);



            // Navigate to the home page or another secure page

            Navigation.NavigateTo("/", true);

        }

        else

        {

            // Display an error message if login fails

            Message = "Invalid username or password.";

        }
        }

    }
